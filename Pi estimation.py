import math
import numpy as np

def pi_estimator():
    simulation_counter = 0 
    all_points = 1000000
    num_inside_circle = 0
    
    while simulation_counter < all_points:
        x_axis = np.random.uniform(-1, 1) # defined x-axis with a float random number generated by numpy library between -1 and 1
        y_axis = np.random.uniform(-1, 1) # defined y-axis with a float random number generated by numpy library between -1 and 1

        # check if the axes are within the radius of the circumference (because x^2 + y^2 equals r^2 and r^2 is 1 in this case)
        if ((x_axis**2) + (y_axis**2)) <= 1: 
            
            num_inside_circle += 1 # if so, adds one to the number of points inside the circle 
            
        simulation_counter +=1
  
    # returns the equation for finding pi taking points of the circle divided points of the square that fits the circle and multiplies by 4
    return (num_inside_circle/all_points)*4 

print(pi_estimator())
print(math.pi) # checks for the difference between the actual value of pi